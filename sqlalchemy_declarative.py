import os
import sys
from sqlalchemy import Column, ForeignKey, Integer, String, Float, DateTime
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy import create_engine

Base = declarative_base()
 
class Customer(Base):
    __tablename__ = 'MF_Customer'

    CM_CUSTID=Column(String(20), primary_key=True)
    CM_A1AUTOUPLD=Column(String(1), nullable=True)
    CM_A1CYCLE=Column(String(2), nullable=True)
    CM_A1ENDTIME=Column(Integer, nullable=True)
    CM_A1MFPEND=Column(String(1), nullable=True)
    CM_A1UPLDATE=Column(DateTime, nullable=True)
    CM_A2AUTOUPLD=Column(String(1), nullable=True)
    CM_A2CYCLE=Column(String(2), nullable=True)
    CM_A2ENDTIME=Column(Integer, nullable=True)
    CM_A2MFPEND=Column(String(1), nullable=True)
    CM_A2UPLDATE=Column(DateTime, nullable=True)
    CM_A3AUTOUPLD=Column(String(1), nullable=True)
    CM_A3CYCLE=Column(String(2), nullable=True)
    CM_A3ENDTIME=Column(Integer, nullable=True)
    CM_A3MFPEND=Column(String(1), nullable=True)
    CM_A3UPLDATE=Column(DateTime, nullable=True)
    CM_A4AUTOUPLD=Column(String(1), nullable=True)
    CM_A4CYCLE=Column(String(2), nullable=True)
    CM_A4ENDTIME=Column(Integer, nullable=True)
    CM_A4MFPEND=Column(String(1), nullable=True)
    CM_A4UPLDATE=Column(DateTime, nullable=True)
    CM_A5AUTOUPLD=Column(String(1), nullable=True)
    CM_A5CYCLE=Column(String(2), nullable=True)
    CM_A5ENDTIME=Column(Integer, nullable=True)
    CM_A5MFPEND=Column(String(1), nullable=True)
    CM_A5UPLDATE=Column(DateTime, nullable=True)
    CM_ACCOUNT=Column(String(20), nullable=True)
    CM_ADDR1=Column(String(20), nullable=True)
    CM_ADDR2=Column(String(20), nullable=True)
    CM_APPLCODE=Column(String(2), nullable=True)
    CM_AUTOUPLD=Column(String(1), nullable=True)
    CM_BBSLIB=Column(String(8), nullable=True)
    CM_BILLKVAR=Column(String(1), nullable=True)
    CM_CHDATE=Column(DateTime, nullable=True)
    CM_CHTYPE=Column(String(1), nullable=True)
    CM_COMMENT=Column(String(40), nullable=True)
    CM_CONTACT=Column(String(20), nullable=True)
    CM_CRITPROG=Column(String(10), nullable=True)
    CM_CYCLE=Column(String(2), nullable=True)
    CM_DL1=Column(Float(precision=9), nullable=True)
    CM_DL2=Column(Float(precision=9), nullable=True)
    CM_ENDTIME=Column(Integer, nullable=True)
    CM_FSLGLD=Column(String(10), nullable=True)
    CM_GROUP=Column(String(6), nullable=True)
    CM_LCTYPE=Column(String(1), nullable=True)
    CM_LOGCHANS=Column(Integer, nullable=True)
    CM_MASTMTRID=Column(String(12), nullable=True)
    CM_MASTSCHED=Column(String(2), nullable=True)
    CM_MFPEND=Column(String(1), nullable=True)
    CM_MULREC=Column(String(1), nullable=True)
    CM_NAME=Column(String(20), nullable=True)
    CM_OPTDATA=Column(String(1), nullable=True)
    CM_PBS=Column(String(1), nullable=True)
    CM_PF1=Column(Float(precision=9), nullable=True)
    CM_PF2=Column(Float(precision=9), nullable=True)
    CM_PFDL=Column(Float(precision=9), nullable=True)
    CM_PHONE=Column(String(20), nullable=True)
    CM_PRCUSTID=Column(String(20), nullable=True)
    CM_RATE=Column(String(6), nullable=True)
    CM_RPCYCLE=Column(String(2), nullable=True)
    CM_RPENDTIME=Column(Integer, nullable=True)
    CM_RPTFILE=Column(String(12), nullable=True)
    CM_RPTSTART=Column(DateTime, nullable=True)
    CM_RPTSTOP=Column(DateTime, nullable=True)
    CM_SIC=Column(String(8), nullable=True)
    CM_STRATA=Column(String(2), nullable=True)
    CM_TOUCODE=Column(String(2), nullable=True)
    CM_UPLDATE=Column(DateTime, nullable=True)

    def __eq__(self, other):
        return self.CM_CUSTID==other.CM_CUSTID

    def __hash__(self):
        return hash(('CM_CUSTID', self.CM_CUSTID,))

# I Could implement foreign IDs for now just getting it done
class Channel(Base):
    __tablename__ = 'MF_Channel'

    MM_Channel_id = Column(Integer, primary_key=True)
    MM_ABSDIFF=Column(Float(precision=5), nullable=True)
    MM_CFCODE=Column(Float(precision=1), nullable=True)
    MM_CFORM=Column(String(1), nullable=True)
    MM_CHDATE=Column(DateTime, nullable=True)
    MM_CHTYPE=Column(String(1), nullable=True)
    MM_CORRFACT=Column(Float(precision=7), nullable=True)
    MM_CUSTID=Column(String(20), nullable=True)
    MM_DECPOS=Column(Integer, nullable=True)
    MM_ENCBASE=Column(Float(precision=9), nullable=True)
    MM_ENCTYPE=Column(String(2), nullable=True)
    MM_Extra1=Column(String(1), nullable=True)
    MM_Extra2=Column(String(1), nullable=True)
    MM_Extra3=Column(String(1), nullable=True)
    MM_FLOW=Column(String(1), nullable=True)
    MM_GROUP=Column(String(6), nullable=True)
    MM_KVARH=Column(String(1), nullable=True)
    MM_KVASET=Column(Integer, nullable=True)
    MM_LASTENC=Column(Float(precision=9), nullable=True)
    MM_LASTKVR=Column(Float(precision=9), nullable=True)
    MM_LASTVIS=Column(Float(precision=9), nullable=True)
    MM_LFTOL=Column(Float(precision=2), nullable=True)
    MM_LOGCHAN=Column(Integer, nullable=True)
    MM_LOSSOPT=Column(String(2), nullable=True)
    MM_MAPCHAN=Column(String(2), nullable=True)
    MM_MAXINT=Column(Float(precision=9), nullable=True)
    MM_MAXTOT=Column(Float(precision=9), nullable=True)
    MM_METERID=Column(String(12), nullable=True)
    MM_METINSTD=Column(Integer, nullable=True)
    MM_METSEQ=Column(String(2), nullable=True)
    MM_MININT=Column(Float(precision=9), nullable=True)
    MM_MINTOT=Column(Float(precision=9), nullable=True)
    MM_MMULT=Column(Float(precision=9), nullable=True)
    MM_MREADS=Column(String(1), nullable=True)
    MM_NDIALS=Column(Integer, nullable=True)
    MM_NRKDIALS=Column(Integer, nullable=True)
    MM_NRKVARH=Column(String(1), nullable=True)
    MM_NRKVMULT=Column(Float(precision=9), nullable=True)
    MM_NRKVSN=Column(String(12), nullable=True)
    MM_OMITUPLD=Column(String(1), nullable=True)
    MM_OPTDATA=Column(String(1), nullable=True)
    MM_PCTCHG=Column(Float(precision=2), nullable=True)
    MM_PFTOL=Column(Float(precision=2), nullable=True)
    MM_PHASE=Column(Integer, nullable=True)
    MM_PMULT=Column(Float(precision=9), nullable=True)
    MM_POFFS=Column(Float(precision=9), nullable=True)
    MM_PTRATIO=Column(Float(precision=5), nullable=True)
    MM_PYSCHAN=Column(Integer, nullable=True)
    MM_RDCHAN=Column(String(2), nullable=True)
    MM_RDTOL=Column(Float(precision=9), nullable=True)
    MM_RECID=Column(String(14), nullable=True)
    MM_REGTYPE=Column(String(1), nullable=True)
    MM_SERVTYPE=Column(String(1), nullable=True)
    MM_TOLPCT=Column(Float(precision=5), nullable=True)
    MM_TOLTYPE=Column(String(1), nullable=True)
    MM_TOTPULSE=Column(Float(precision=9), nullable=True)
    MM_UMCODE=Column(Integer, nullable=True)
    MM_UOMSCALE=Column(String(1), nullable=True)
    MM_VCLC=Column(Float(precision=9), nullable=True)
    MM_VILC=Column(Float(precision=9), nullable=True)
    MM_VOLTS=Column(Float(precision=9), nullable=True)
    MM_WCLC=Column(Float(precision=9), nullable=True)
    MM_WILC=Column(Float(precision=9), nullable=True)
    MM_XFACCT=Column(String(20), nullable=True)
    MM_ZEROINT=Column(Float(precision=3), nullable=True)

# I Could implement foreign IDs for now just getting it done
class Recorder(Base):
    __tablename__ = 'MF_Recorder'

    RM_RECID=Column(String(14), primary_key=True)
    RM_CORRECTIONFACTORTOL=Column(String(3), nullable=True)
    RM_INBOUNDCALLDELAY1=Column(String(4), nullable=True)
    RM_INBOUNDCALLDELAY2=Column(String(4), nullable=True)
    RM_MTRTYPE=Column(String(1), nullable=True)
    RM_SERVICE_BASED_ID=Column(String(20), nullable=True)
    RM_ALARM=Column(String(5), nullable=True)
    RM_ANSWINDOW=Column(Integer, nullable=True)
    RM_AWDAYS=Column(String(1), nullable=True)
    RM_BATINSTD=Column(Integer, nullable=True)
    RM_BATLOGD=Column(Integer, nullable=True)
    RM_BATLOGM=Column(Integer, nullable=True)
    RM_BAUD=Column(Integer, nullable=True)
    RM_BAUD1=Column(String(1), nullable=True)
    RM_CALLMODE=Column(String(2), nullable=True)
    RM_CALLTIME=Column(Integer, nullable=True)
    RM_CFGNAME=Column(String(12), nullable=True)
    RM_CHAN=Column(Integer, nullable=True)
    RM_CHDATE=Column(Integer, nullable=True)
    RM_CHOFFSET=Column(String(3), nullable=True)
    RM_CHROM_ID=Column(String(14), nullable=True)
    RM_CHTYPE=Column(String(1), nullable=True)
    RM_CONNTYPE=Column(String(8), nullable=True)
    RM_CURINTVLEN=Column(Integer, nullable=True)
    RM_DCHAIN=Column(String(1), nullable=True)
    RM_DCMASTER=Column(String(14), nullable=True)
    RM_DCSLAVE=Column(String(14), nullable=True)
    RM_DEVID=Column(String(20), nullable=True)
    RM_DEVSN=Column(String(8), nullable=True)
    RM_DEVTYP=Column(String(15), nullable=True)
    RM_DST=Column(String(1), nullable=True)
    RM_EXPANDED=Column(String(1), nullable=True)
    RM_FWDCALL=Column(String(1), nullable=True)
    RM_GROUP=Column(String(6), nullable=True)
    RM_HOMEPHONE1=Column(String(36), nullable=True)
    RM_HOMEPHONE2=Column(String(36), nullable=True)
    RM_INITDATE=Column(DateTime, nullable=True)
    RM_INPHR=Column(Integer, nullable=True)
    RM_INPUTDESC=Column(String(30), nullable=True)
    RM_INSCID=Column(String(8), nullable=True)
    RM_IP_PORT=Column(String(6), nullable=True)
    RM_LASTTIME=Column(Integer, nullable=True)
    RM_LMTCALL=Column(Integer, nullable=True)
    RM_LOCALPW=Column(String(20), nullable=True)
    RM_LOCAT=Column(String(20), nullable=True)
    RM_LOP=Column(String(1), nullable=True)
    RM_LPCPHONE=Column(String(20), nullable=True)
    RM_MEMSIZE=Column(Integer, nullable=True)
    RM_METERCGF=Column(String(8), nullable=True)
    RM_METERCHG=Column(String(1), nullable=True)
    RM_METLOC=Column(String(2), nullable=True)
    RM_MFILE=Column(String(12), nullable=True)
    RM_NRINGS=Column(Integer, nullable=True)
    RM_NUMCALLS=Column(Integer, nullable=True)
    RM_NUMTRIES=Column(Integer, nullable=True)
    RM_OLDDST=Column(String(1), nullable=True)
    RM_PLUG_MISS=Column(String(2), nullable=True)
    RM_PLUG_OPT=Column(String(1), nullable=True)
    RM_PLUG_OUT=Column(String(1), nullable=True)
    RM_PLUG_PER=Column(String(3), nullable=True)
    RM_PLUG_REF=Column(String(14), nullable=True)
    RM_PW1=Column(String(12), nullable=True)
    RM_PW2=Column(String(12), nullable=True)
    RM_RDRECID=Column(String(14), nullable=True)
    RM_READINS=Column(String(2), nullable=True)
    RM_RELAYDESC=Column(String(30), nullable=True)
    RM_RELAYTYPE=Column(String(5), nullable=True)
    RM_RIPEND=Column(String(1), nullable=True)
    RM_ROUTE=Column(String(6), nullable=True)
    RM_RPC=Column(String(2), nullable=True)
    RM_RPCPHONE=Column(String(20), nullable=True)
    RM_SEQROUTE=Column(String(5), nullable=True)
    RM_SLOTNUMBER=Column(String(4), nullable=True)
    RM_STATUS=Column(String(2), nullable=True)
    RM_STATUSINPUTS=Column(String(5), nullable=True)
    RM_TIM=Column(Integer, nullable=True)
    RM_TIMESET=Column(String(1), nullable=True)
    RM_TIMETOL=Column(String(3), nullable=True)
    RM_TOTMETERS=Column(Integer, nullable=True)
    RM_TZONEADJ=Column(Integer, nullable=True)
    RM_UADDR=Column(Integer, nullable=True)
    RM_UPDINTVLEN=Column(Integer, nullable=True)
    RM_VOLTAGE=Column(String(2), nullable=True)

    def __eq__(self, other):
        return self.RM_RECID==other.RM_RECID

    def __hash__(self):
        return hash(('RM_RECID', self.RM_RECID,))

# Create an engine that stores data in the local directory's
engine = create_engine(r'sqlite:///C:\\Users\\CJANCSAR\\Documents\\FNBUG\\Data\\MV90Extension.db')

# Create all tables in the engine. This is equivalent to "Create Table"
# statements in raw SQL.
Base.metadata.create_all(engine)
